import sympy as sp
from sympy import *
import numpy as np
from time import strftime, localtime
import time 

class Walker3DModelling():
    def __init__(self):
        pass
    
    def gen_func(
        self,
        file_name, 
        func_name, 
        arguments, 
        expression, 
        return_object,
        folder_name='./',
        datatype=''
    ):
        array_syntax = 'np.array(['  
        
        if datatype == 'value':
            array_syntax = array_syntax + str(expression)
        elif datatype == 'posi' or datatype == 'velo':
            n = expression.shape[0]
            m = expression.shape[1]

            if m==1:
                for i in range(3):
                    
                    array_syntax = array_syntax + str(expression[i,0])
                    if i < n - 1:
                        array_syntax = array_syntax + ', '
            else:
                for i in range(3):
                    array_syntax = array_syntax + str(expression[0,i])
                    if i < m - 1:
                        array_syntax = array_syntax + ', '
        else:
            print("CHECK DATATYPE")
            exit()
                    
        array_syntax = array_syntax + '])'   
        
        t = strftime('%Y-%m-%d %H:%M:%S', localtime(time.time()))

        function_definition = f"""
import numpy as np
from sympy import *
# AUTO-GENERATE @ {t}

def {func_name}{arguments}:

    {return_object} = {array_syntax}  

    return {return_object}
"""
        # import os
        # print(os.getcwd())

        # exit()
        file_name = folder_name+'/'+file_name
        with open(file_name, "w") as f:
            f.write(function_definition.strip())  # Use .strip() to remove leading/trailing whitespace
            
    def get_p_H(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):
        
        p_H = np.array([l0*sin(pitch) + x, -l0*sin(roll)*cos(pitch) + y, l0*cos(pitch)*cos(roll) + z, ])  

        return p_H
    
    def get_p_B(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):
        
        p_B = np.array([x, y, z])  

        return p_B
    
    def get_p_LH(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_LH = np.array([w*(1 - cos(roll_lh))*(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw)) - w*(1 - cos(yaw_lh))*sin(yaw)*cos(pitch) + w*((-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*cos(roll_lh) + sin(pitch)*sin(roll_lh)) - w*sin(pitch)*sin(roll_lh) + w*sin(yaw_lh)*cos(pitch)*cos(yaw) + x, w*(1 - cos(roll_lh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh)) + w*(1 - cos(yaw_lh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) + w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*cos(roll_lh) - sin(roll)*sin(roll_lh)*cos(pitch)) + w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh) + w*sin(roll)*sin(roll_lh)*cos(pitch) + y, w*(1 - cos(roll_lh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh)) + w*(1 - cos(yaw_lh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) + w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*cos(roll_lh) + sin(roll_lh)*cos(pitch)*cos(roll)) + w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh) - w*sin(roll_lh)*cos(pitch)*cos(roll) + z, ])  

        return p_LH
    
    def get_p_RH(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_RH = np.array([-w*(1 - cos(roll_rh))*(-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw)) + w*(1 - cos(yaw_rh))*sin(yaw)*cos(pitch) - w*((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*cos(roll_rh) - sin(pitch)*sin(roll_rh)) - w*sin(pitch)*sin(roll_rh) + w*sin(yaw_rh)*cos(pitch)*cos(yaw) + x, -w*(1 - cos(roll_rh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh)) - w*(1 - cos(yaw_rh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) - w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*cos(roll_rh) + sin(roll)*sin(roll_rh)*cos(pitch)) + w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh) + w*sin(roll)*sin(roll_rh)*cos(pitch) + y, -w*(1 - cos(roll_rh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh)) - w*(1 - cos(yaw_rh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) - w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*cos(roll_rh) - sin(roll_rh)*cos(pitch)*cos(roll)) + w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh) - w*sin(roll_rh)*cos(pitch)*cos(roll) + z, ])  

        return p_RH

    def get_p_LK(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_LK = np.array([-l1*(1 - cos(pitch_lk))*((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*cos(pitch_lh) - (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*sin(pitch_lh)) - l1*(-((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*sin(pitch_lh) + (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*cos(pitch_lh) - (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)) - l1*((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*sin(pitch_lh) + (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + w*(1 - cos(roll_lh))*(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw)) - w*(1 - cos(yaw_lh))*sin(yaw)*cos(pitch) + w*((-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*cos(roll_lh) + sin(pitch)*sin(roll_lh)) - w*sin(pitch)*sin(roll_lh) + w*sin(yaw_lh)*cos(pitch)*cos(yaw) + x, -l1*(1 - cos(pitch_lk))*((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*cos(pitch_lh) - ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*sin(pitch_lh)) - l1*(-((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*sin(pitch_lh) + ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*cos(pitch_lh) - ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)) - l1*((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*sin(pitch_lh) + ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + w*(1 - cos(roll_lh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh)) + w*(1 - cos(yaw_lh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) + w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*cos(roll_lh) - sin(roll)*sin(roll_lh)*cos(pitch)) + w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh) + w*sin(roll)*sin(roll_lh)*cos(pitch) + y, -l1*(1 - cos(pitch_lk))*((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*cos(pitch_lh) - ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*sin(pitch_lh)) - l1*(-((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*sin(pitch_lh) + ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*cos(pitch_lh) - ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)) - l1*((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*sin(pitch_lh) + ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + w*(1 - cos(roll_lh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh)) + w*(1 - cos(yaw_lh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) + w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*cos(roll_lh) + sin(roll_lh)*cos(pitch)*cos(roll)) + w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh) - w*sin(roll_lh)*cos(pitch)*cos(roll) + z, ])  

        return p_LK

    def get_p_RK(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_RK = np.array([-l1*(1 - cos(pitch_rk))*(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*cos(pitch_rh) - (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*sin(pitch_rh)) - l1*(-(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*sin(pitch_rh) + (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + (((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*cos(pitch_rh) - (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)) - l1*(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*sin(pitch_rh) + (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) - w*(1 - cos(roll_rh))*(-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw)) + w*(1 - cos(yaw_rh))*sin(yaw)*cos(pitch) - w*((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*cos(roll_rh) - sin(pitch)*sin(roll_rh)) - w*sin(pitch)*sin(roll_rh) + w*sin(yaw_rh)*cos(pitch)*cos(yaw) + x, -l1*(1 - cos(pitch_rk))*((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*cos(pitch_rh) - (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*sin(pitch_rh)) - l1*(-((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*sin(pitch_rh) + (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*cos(pitch_rh) - (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)) - l1*((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*sin(pitch_rh) + (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) - w*(1 - cos(roll_rh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh)) - w*(1 - cos(yaw_rh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) - w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*cos(roll_rh) + sin(roll)*sin(roll_rh)*cos(pitch)) + w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh) + w*sin(roll)*sin(roll_rh)*cos(pitch) + y, -l1*(1 - cos(pitch_rk))*((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*cos(pitch_rh) - (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*sin(pitch_rh)) - l1*(-((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*sin(pitch_rh) + (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*cos(pitch_rh) - (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)) - l1*((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*sin(pitch_rh) + (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) - w*(1 - cos(roll_rh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh)) - w*(1 - cos(yaw_rh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) - w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*cos(roll_rh) - sin(roll_rh)*cos(pitch)*cos(roll)) + w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh) - w*sin(roll_rh)*cos(pitch)*cos(roll) + z, ])  

        return p_RK

    def get_p_LA(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_LA = np.array([-l1*(1 - cos(pitch_lk))*((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*cos(pitch_lh) - (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*sin(pitch_lh)) - l1*((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*sin(pitch_lh) + (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + w*(1 - cos(roll_lh))*(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw)) - w*(1 - cos(yaw_lh))*sin(yaw)*cos(pitch) + w*((-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*cos(roll_lh) + sin(pitch)*sin(roll_lh)) - w*sin(pitch)*sin(roll_lh) + w*sin(yaw_lh)*cos(pitch)*cos(yaw) + x + (-l1 - l2)*(-((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*sin(pitch_lh) + (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*cos(pitch_lh) - (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)), -l1*(1 - cos(pitch_lk))*((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*cos(pitch_lh) - ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*sin(pitch_lh)) - l1*((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*sin(pitch_lh) + ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + w*(1 - cos(roll_lh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh)) + w*(1 - cos(yaw_lh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) + w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*cos(roll_lh) - sin(roll)*sin(roll_lh)*cos(pitch)) + w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh) + w*sin(roll)*sin(roll_lh)*cos(pitch) + y + (-l1 - l2)*(-((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*sin(pitch_lh) + ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*cos(pitch_lh) - ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)), -l1*(1 - cos(pitch_lk))*((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*cos(pitch_lh) - ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*sin(pitch_lh)) - l1*((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*sin(pitch_lh) + ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + w*(1 - cos(roll_lh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh)) + w*(1 - cos(yaw_lh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) + w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*cos(roll_lh) + sin(roll_lh)*cos(pitch)*cos(roll)) + w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh) - w*sin(roll_lh)*cos(pitch)*cos(roll) + z + (-l1 - l2)*(-((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*sin(pitch_lh) + ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*cos(pitch_lh) - ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)), ])  

        return p_LA
    
    def get_p_RA(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_RA = np.array([-l1*(1 - cos(pitch_rk))*(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*cos(pitch_rh) - (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*sin(pitch_rh)) - l1*(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*sin(pitch_rh) + (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) - w*(1 - cos(roll_rh))*(-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw)) + w*(1 - cos(yaw_rh))*sin(yaw)*cos(pitch) - w*((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*cos(roll_rh) - sin(pitch)*sin(roll_rh)) - w*sin(pitch)*sin(roll_rh) + w*sin(yaw_rh)*cos(pitch)*cos(yaw) + x + (-l1 - l2)*(-(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*sin(pitch_rh) + (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + (((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*cos(pitch_rh) - (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)), -l1*(1 - cos(pitch_rk))*((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*cos(pitch_rh) - (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*sin(pitch_rh)) - l1*((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*sin(pitch_rh) + (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) - w*(1 - cos(roll_rh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh)) - w*(1 - cos(yaw_rh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) - w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*cos(roll_rh) + sin(roll)*sin(roll_rh)*cos(pitch)) + w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh) + w*sin(roll)*sin(roll_rh)*cos(pitch) + y + (-l1 - l2)*(-((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*sin(pitch_rh) + (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*cos(pitch_rh) - (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)), -l1*(1 - cos(pitch_rk))*((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*cos(pitch_rh) - (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*sin(pitch_rh)) - l1*((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*sin(pitch_rh) + (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) - w*(1 - cos(roll_rh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh)) - w*(1 - cos(yaw_rh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) - w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*cos(roll_rh) - sin(roll_rh)*cos(pitch)*cos(roll)) + w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh) - w*sin(roll_rh)*cos(pitch)*cos(roll) + z + (-l1 - l2)*(-((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*sin(pitch_rh) + (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*cos(pitch_rh) - (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)), ])  

        return p_RA

    def get_p_Torso(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_Torso = np.array([l0*sin(pitch)/2 + x, -l0*sin(roll)*cos(pitch)/2 + y, l0*cos(pitch)*cos(roll)/2 + z, ])  

        return p_Torso

    def get_p_Thigh_L(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_Thigh_L = np.array([-l1*((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*cos(pitch_lh) - (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*sin(pitch_lh))/2 + w*(1 - cos(roll_lh))*(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw)) - w*(1 - cos(yaw_lh))*sin(yaw)*cos(pitch) + w*((-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*cos(roll_lh) + sin(pitch)*sin(roll_lh)) - w*sin(pitch)*sin(roll_lh) + w*sin(yaw_lh)*cos(pitch)*cos(yaw) + x, -l1*((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*cos(pitch_lh) - ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*sin(pitch_lh))/2 + w*(1 - cos(roll_lh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh)) + w*(1 - cos(yaw_lh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) + w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*cos(roll_lh) - sin(roll)*sin(roll_lh)*cos(pitch)) + w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh) + w*sin(roll)*sin(roll_lh)*cos(pitch) + y, -l1*((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*cos(pitch_lh) - ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*sin(pitch_lh))/2 + w*(1 - cos(roll_lh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh)) + w*(1 - cos(yaw_lh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) + w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*cos(roll_lh) + sin(roll_lh)*cos(pitch)*cos(roll)) + w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh) - w*sin(roll_lh)*cos(pitch)*cos(roll) + z, ])  

        return p_Thigh_L

    def get_p_Thigh_R(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_Thigh_R = np.array([-l1*(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*cos(pitch_rh) - (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*sin(pitch_rh))/2 - w*(1 - cos(roll_rh))*(-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw)) + w*(1 - cos(yaw_rh))*sin(yaw)*cos(pitch) - w*((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*cos(roll_rh) - sin(pitch)*sin(roll_rh)) - w*sin(pitch)*sin(roll_rh) + w*sin(yaw_rh)*cos(pitch)*cos(yaw) + x, -l1*((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*cos(pitch_rh) - (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*sin(pitch_rh))/2 - w*(1 - cos(roll_rh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh)) - w*(1 - cos(yaw_rh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) - w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*cos(roll_rh) + sin(roll)*sin(roll_rh)*cos(pitch)) + w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh) + w*sin(roll)*sin(roll_rh)*cos(pitch) + y, -l1*((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*cos(pitch_rh) - (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*sin(pitch_rh))/2 - w*(1 - cos(roll_rh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh)) - w*(1 - cos(yaw_rh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) - w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*cos(roll_rh) - sin(roll_rh)*cos(pitch)*cos(roll)) + w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh) - w*sin(roll_rh)*cos(pitch)*cos(roll) + z, ])  

        return p_Thigh_R

    def get_p_Calf_L(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_Calf_L = np.array([-l1*(1 - cos(pitch_lk))*((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*cos(pitch_lh) - (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*sin(pitch_lh)) - l1*((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*sin(pitch_lh) + (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + w*(1 - cos(roll_lh))*(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw)) - w*(1 - cos(yaw_lh))*sin(yaw)*cos(pitch) + w*((-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*cos(roll_lh) + sin(pitch)*sin(roll_lh)) - w*sin(pitch)*sin(roll_lh) + w*sin(yaw_lh)*cos(pitch)*cos(yaw) + x + (-l1 - l2/2)*(-((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*sin(pitch_lh) + (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*cos(pitch_lh) - (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)), -l1*(1 - cos(pitch_lk))*((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*cos(pitch_lh) - ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*sin(pitch_lh)) - l1*((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*sin(pitch_lh) + ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + w*(1 - cos(roll_lh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh)) + w*(1 - cos(yaw_lh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) + w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*cos(roll_lh) - sin(roll)*sin(roll_lh)*cos(pitch)) + w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh) + w*sin(roll)*sin(roll_lh)*cos(pitch) + y + (-l1 - l2/2)*(-((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*sin(pitch_lh) + ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*cos(pitch_lh) - ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)), -l1*(1 - cos(pitch_lk))*((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*cos(pitch_lh) - ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*sin(pitch_lh)) - l1*((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*sin(pitch_lh) + ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + w*(1 - cos(roll_lh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh)) + w*(1 - cos(yaw_lh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) + w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*cos(roll_lh) + sin(roll_lh)*cos(pitch)*cos(roll)) + w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh) - w*sin(roll_lh)*cos(pitch)*cos(roll) + z + (-l1 - l2/2)*(-((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*sin(pitch_lh) + ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*cos(pitch_lh) - ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)), ])  

        return p_Calf_L
    
    def get_p_Calf_R(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_Calf_R = np.array([-l1*(1 - cos(pitch_rk))*(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*cos(pitch_rh) - (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*sin(pitch_rh)) - l1*(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*sin(pitch_rh) + (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) - w*(1 - cos(roll_rh))*(-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw)) + w*(1 - cos(yaw_rh))*sin(yaw)*cos(pitch) - w*((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*cos(roll_rh) - sin(pitch)*sin(roll_rh)) - w*sin(pitch)*sin(roll_rh) + w*sin(yaw_rh)*cos(pitch)*cos(yaw) + x + (-l1 - l2/2)*(-(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*sin(pitch_rh) + (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + (((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*cos(pitch_rh) - (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)), -l1*(1 - cos(pitch_rk))*((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*cos(pitch_rh) - (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*sin(pitch_rh)) - l1*((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*sin(pitch_rh) + (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) - w*(1 - cos(roll_rh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh)) - w*(1 - cos(yaw_rh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) - w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*cos(roll_rh) + sin(roll)*sin(roll_rh)*cos(pitch)) + w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh) + w*sin(roll)*sin(roll_rh)*cos(pitch) + y + (-l1 - l2/2)*(-((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*sin(pitch_rh) + (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*cos(pitch_rh) - (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)), -l1*(1 - cos(pitch_rk))*((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*cos(pitch_rh) - (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*sin(pitch_rh)) - l1*((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*sin(pitch_rh) + (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) - w*(1 - cos(roll_rh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh)) - w*(1 - cos(yaw_rh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) - w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*cos(roll_rh) - sin(roll_rh)*cos(pitch)*cos(roll)) + w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh) - w*sin(roll_rh)*cos(pitch)*cos(roll) + z + (-l1 - l2/2)*(-((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*sin(pitch_rh) + (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*cos(pitch_rh) - (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)), ])  

        return p_Calf_R
    
    def get_p_Hip_L_init(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_Hip_L_init = np.array([l1*(1 - cos(pitch_lk))*((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*cos(pitch_lh) - (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*sin(pitch_lh)) + l1*((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*sin(pitch_lh) + (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) - w*(1 - cos(roll_lh))*(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw)) + w*(1 - cos(yaw_lh))*sin(yaw)*cos(pitch) - w*((-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*cos(roll_lh) + sin(pitch)*sin(roll_lh)) + w*sin(pitch)*sin(roll_lh) - w*sin(yaw_lh)*cos(pitch)*cos(yaw) - x - (-l1 - l2)*(-((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*sin(pitch_lh) + (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-(-sin(yaw)*cos(pitch)*cos(yaw_lh) - sin(yaw_lh)*cos(pitch)*cos(yaw))*sin(roll_lh) + sin(pitch)*cos(roll_lh))*cos(pitch_lh) - (-sin(yaw)*sin(yaw_lh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)), l1*(1 - cos(pitch_lk))*((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*cos(pitch_lh) - ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*sin(pitch_lh)) + l1*((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*sin(pitch_lh) + ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) - w*(1 - cos(roll_lh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh)) - w*(1 - cos(yaw_lh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) - w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*cos(roll_lh) - sin(roll)*sin(roll_lh)*cos(pitch)) - w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh) - w*sin(roll)*sin(roll_lh)*cos(pitch) - y - (-l1 - l2)*(-((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*sin(pitch_lh) + ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_lh) - (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_lh))*sin(roll_lh) - sin(roll)*cos(pitch)*cos(roll_lh))*cos(pitch_lh) - ((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_lh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)), l1*(1 - cos(pitch_lk))*((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*cos(pitch_lh) - ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*sin(pitch_lh)) + l1*((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*sin(pitch_lh) + ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) - w*(1 - cos(roll_lh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh)) - w*(1 - cos(yaw_lh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) - w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*cos(roll_lh) + sin(roll_lh)*cos(pitch)*cos(roll)) - w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh) + w*sin(roll_lh)*cos(pitch)*cos(roll) - z - (-l1 - l2)*(-((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*sin(pitch_lh) + ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*cos(pitch_lh))*sin(pitch_lk) + ((-((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_lh) - (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_lh))*sin(roll_lh) + cos(pitch)*cos(roll)*cos(roll_lh))*cos(pitch_lh) - ((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_lh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_lh))*sin(pitch_lh))*cos(pitch_lk)), ])  

        return p_Hip_L_init
    
    def get_p_Hip_R_init(self, x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, roll_rh, pitch_rh, yaw_rh, pitch_lk, pitch_rk, w, l0, l1, l2):

        p_Hip_R_init = np.array([l1*(1 - cos(pitch_rk))*(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*cos(pitch_rh) - (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*sin(pitch_rh)) + l1*(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*sin(pitch_rh) + (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + w*(1 - cos(roll_rh))*(-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw)) - w*(1 - cos(yaw_rh))*sin(yaw)*cos(pitch) + w*((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*cos(roll_rh) - sin(pitch)*sin(roll_rh)) + w*sin(pitch)*sin(roll_rh) - w*sin(yaw_rh)*cos(pitch)*cos(yaw) - x - (-l1 - l2)*(-(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*sin(pitch_rh) + (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + (((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*cos(pitch_rh) - (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)), l1*(1 - cos(pitch_rk))*((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*cos(pitch_rh) - (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*sin(pitch_rh)) + l1*((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*sin(pitch_rh) + (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + w*(1 - cos(roll_rh))*((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh)) + w*(1 - cos(yaw_rh))*(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw)) + w*(((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*cos(roll_rh) + sin(roll)*sin(roll_rh)*cos(pitch)) - w*(sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh) - w*sin(roll)*sin(roll_rh)*cos(pitch) - y - (-l1 - l2)*(-((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*sin(pitch_rh) + (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*cos(pitch_rh) - (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)), l1*(1 - cos(pitch_rk))*((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*cos(pitch_rh) - (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*sin(pitch_rh)) + l1*((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*sin(pitch_rh) + (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + w*(1 - cos(roll_rh))*((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh)) + w*(1 - cos(yaw_rh))*(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw)) + w*(((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*cos(roll_rh) - sin(roll_rh)*cos(pitch)*cos(roll)) - w*(-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh) + w*sin(roll_rh)*cos(pitch)*cos(roll) - z - (-l1 - l2)*(-((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*sin(pitch_rh) + (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*cos(pitch_rh) - (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)), ])  

        return p_Hip_R_init
   
   