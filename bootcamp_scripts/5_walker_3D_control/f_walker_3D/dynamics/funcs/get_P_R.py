import numpy as np
from sympy import *
# AUTO-GENERATE @ 2024-10-22 14:01:14

def get_P_R(x, y, z, roll, pitch, yaw, roll_lh, pitch_lh, yaw_lh, pitch_lk, roll_rh, pitch_rh, yaw_rh, pitch_rk, w, l0, l1, l2, F):

    P_R = np.array([F*(-l1*(-(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*sin(pitch_rh) + (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + (((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*cos(pitch_rh) - (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)) - (-l1 - l2)*(-(((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*sin(pitch_rh) + (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + (((-sin(yaw)*cos(pitch)*cos(yaw_rh) + sin(yaw_rh)*cos(pitch)*cos(yaw))*sin(roll_rh) + sin(pitch)*cos(roll_rh))*cos(pitch_rh) - (sin(yaw)*sin(yaw_rh)*cos(pitch) + cos(pitch)*cos(yaw)*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)))/l2, F*(-l1*(-((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*sin(pitch_rh) + (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*cos(pitch_rh) - (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)) - (-l1 - l2)*(-((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*sin(pitch_rh) + (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*cos(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*sin(yaw_rh))*sin(roll_rh) - sin(roll)*cos(pitch)*cos(roll_rh))*cos(pitch_rh) - (-(-sin(pitch)*sin(roll)*sin(yaw) + cos(roll)*cos(yaw))*sin(yaw_rh) + (sin(pitch)*sin(roll)*cos(yaw) + sin(yaw)*cos(roll))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)))/l2, F*(-l1*(-((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*sin(pitch_rh) + (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*cos(pitch_rh) - (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)) - (-l1 - l2)*(-((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*sin(pitch_rh) + (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*cos(pitch_rh))*sin(pitch_rk) + ((((sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*cos(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*sin(yaw_rh))*sin(roll_rh) + cos(pitch)*cos(roll)*cos(roll_rh))*cos(pitch_rh) - (-(sin(pitch)*sin(yaw)*cos(roll) + sin(roll)*cos(yaw))*sin(yaw_rh) + (-sin(pitch)*cos(roll)*cos(yaw) + sin(roll)*sin(yaw))*cos(yaw_rh))*sin(pitch_rh))*cos(pitch_rk)))/l2, 0])  

    return P_R