clcclose allclear all%Initialize parameters%properties of the manipulator, mass, inertia, etc. .parms.M  =  [1 0.1; 0.1 2];   parms.C  = [0.2 0; 0 0.1];parms.K  =  [5 1; 1 10]; %same as G% %proportional, derivative controllers%Case 1: we have a perfect model% parms.M_hat = parms.M;% parms.C_hat = parms.C;% parms.K_hat = parms.K;%Case2; we have an imperfect modelparms.M_hat = parms.M+[0.1 0.01; 0.1 0.01];parms.C_hat = parms.C+[0.2 0.03; 0.3 0.05];parms.K_hat = parms.K+[0.5 0.05; 0.5 0.05];parms.Kp = 100*diag([1 1]); %vary from 0 to 1000 and see resonse q vs t = diag([1 1]) = [1 0; 0 1]parms.Kd = 2*sqrt(parms.Kp); %critically dampedparms.qd = [0.5 0.1]'; %Set points for position. %set the timeh = 0.001; %step size for integrationt0 = 0;     %start timetN = 10;     %end timeN = (tN-t0)/h;t = linspace(t0,tN,N);% initial conditionsq1    = 0; q1dot    = 0;          q2    = 0;q2dot = 0;x0=[q1 q1dot q2 q2dot]';%integrate equations of motionx = ode4('control_partition_rhs',t,x0,parms);%our goal is to reach the set point parms.qd as soon as possiblefigure(1) subplot(2,1,1);plot(t,x(:,1),'bx',t,parms.qd(1)*ones(1,length(t)),'k--'); hold on; ylabel('q1');legend('actual','setpoint');subplot(2,1,2);plot(t,x(:,3),'rx',t,parms.qd(2)*ones(1,length(t)),'k--'); hold on; xlabel('time');ylabel('q2');legend('actual','setpoint');