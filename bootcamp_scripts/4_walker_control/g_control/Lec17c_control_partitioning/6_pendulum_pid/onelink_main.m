clcclose allclear all%Proportional-Derivative Control of one link pendulum%Try with zero and non-zero Ki1 % <<onelink.png>>%DH for link 1 except qiparms.a1   =  1;            parms.alpha1 = 0; parms.d1=0;%mass, inertia and gravity.parms.m1  =  1;   parms.I1  =  0.5; parms.g   =  10;%animation controlparms.time_delay = 0.05;parms.framespersec = 30;%controlsparms.control.Kp1 = 100;parms.control.Kd1 = 0.1*parms.control.Kp1;parms.control.Ki1 = 100;parms.control.theta1ref = pi/2;%Various Disturbances to the systemparms.disturb.T1_mean = 5;parms.disturb.T1_dev = 0;parms.disturb.theta1_mean = 0;parms.disturb.theta1_dev = 0;parms.disturb.theta1dot_mean = 0;parms.disturb.theta1dot_dev = 0;%step size for integration. Accuracy increases as h decreasesh = 0.005;%set the timet0 = 0; %initial timetN = 4; %end timeN = (tN-t0)/h;t = linspace(t0,tN,N);parms.t = t;%Create disturbancesrandn('seed',0); %initializes random number generator so that you get same results every time you run the code.parms.disturb.T1 = parms.disturb.T1_mean + parms.disturb.T1_dev*randn(N,1);parms.disturb.theta1 = parms.disturb.theta1_mean + parms.disturb.theta1_dev*randn(N,1);parms.disturb.theta1dot = parms.disturb.theta1dot_mean + parms.disturb.theta1dot_dev*randn(N,1);% initial conditionstheta1    =   0; %pi/2 - 0.1; theta1dot    = 0; theta1dt = 0;x0=[theta1 theta1dot theta1dt]';%integrate equations of motionx = ode4('onelink_rhs',t,x0,parms);%get the motor torquefor i=1:length(x)    T1(i,1) = control(t(i),x(i,:),parms);end%do some plots and animationfigure(1)plot(t,parms.control.theta1ref*ones(length(t),1),'k--'); hold on;plot(t,x(:,1),'b'); xlabel('time');ylabel('position');legend('reference','actual');% figure(2)% plot(t,x(:,2),'r');% xlabel('time');% ylabel('velocity');% % figure(3)% plot(t,T1,'k');% xlabel('time');% ylabel('Torque');figure(4)onelink_animation(t,x(:,1),parms);