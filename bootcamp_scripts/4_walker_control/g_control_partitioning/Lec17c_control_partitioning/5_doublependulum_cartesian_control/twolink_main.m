clcclose allclear all%%% Simulation of a two-link manipulator% <<two_link.png>>%%%%%%%%% INITIALIZE PARAMETERS %%%%%%%mass, inertia and gravity.parms.m1  =  1;   parms.I1  =  0.5; parms.m2  =  1;   parms.I2  =  0.5; parms.g   =  0; %gravity is turned off.parms.l1 = 1;parms.l2 = 1;parms.m1_hat = parms.m1 + 0*0.5;parms.I1_hat = parms.I1;parms.m2_hat = parms.m2 + 0*0.5;parms.I2_hat = parms.I2;%stuff for animationparms.time_delay = 0.05; %delay between frames, will need some fine tuning for different computersparms.framespersec = 30;%controlsparms.control.Kp1 = 100;parms.control.Kd1 = 2*sqrt(parms.control.Kp1); %0.1*parms.control.Kp1;parms.control.Kp2 = 100;parms.control.Kd2 = 2*sqrt(parms.control.Kp2); %0.1*parms.control.Kp2;%Various Disturbances to the systemparms.disturb.T1_mean = 0;parms.disturb.T1_dev = 0;parms.disturb.T2_mean = 0;parms.disturb.T2_dev = 0;parms.disturb.theta1_mean = 0;parms.disturb.theta1_dev = 0;parms.disturb.theta2_mean = 0;parms.disturb.theta2_dev = 0;parms.disturb.theta1dot_mean = 0;parms.disturb.theta1dot_dev = 0;parms.disturb.theta2dot_mean = 0;parms.disturb.theta2dot_dev = 0;%step size for integration. Accuracy increases as h decreasesh = 0.005;t0 = 0;tN = 5;[t,theta_ref,thetadot_ref,thetaddot_ref] = twolink_traj(parms,h,t0,tN);parms.t = t;N = length(parms.t);parms.control.theta1_ref = theta_ref(:,1);parms.control.theta2_ref = theta_ref(:,2);parms.control.theta1dot_ref = thetadot_ref(:,1);parms.control.theta2dot_ref = thetadot_ref(:,2);parms.control.theta1ddot_ref = thetaddot_ref(:,1);parms.control.theta2ddot_ref = thetaddot_ref(:,2);%Create disturbancesrandn('seed',0); %initializes random number generator so that you get same results every time you run the code.parms.disturb.T1 = parms.disturb.T1_mean + parms.disturb.T1_dev*randn(N,1);parms.disturb.theta1 = parms.disturb.theta1_mean + parms.disturb.theta1_dev*randn(N,1);parms.disturb.theta1dot = parms.disturb.theta1dot_mean + parms.disturb.theta1dot_dev*randn(N,1);parms.disturb.T2 = parms.disturb.T2_mean + parms.disturb.T2_dev*randn(N,1);parms.disturb.theta2 = parms.disturb.theta2_mean + parms.disturb.theta2_dev*randn(N,1);parms.disturb.theta2dot = parms.disturb.theta2dot_mean + parms.disturb.theta2dot_dev*randn(N,1);%initial conditionstheta1    = parms.control.theta1_ref(1); theta1dot    = parms.control.theta1dot_ref(1);  theta2    = parms.control.theta2_ref(1); theta2dot    = parms.control.theta2dot_ref(1);  x0=[theta1 theta1dot theta2 theta2dot]';%integrate equations of motionx = ode4('twolink_rhs',t,x0,parms);%Root mean square errorerr_pos = sqrt( mean( (x(:,1)-parms.control.theta1_ref).^2 + (x(:,3)-parms.control.theta2_ref).^2 ) );err_vel = sqrt( mean( (x(:,2)-parms.control.theta1dot_ref).^2 + (x(:,4)-parms.control.theta2dot_ref).^2 ));disp(['RMSE position = ',num2str(err_pos)]);disp(['RMSE velocity = ',num2str(err_vel)]);%get the motor torquefor i=1:length(x)    [T1(i,1) T2(i,1)] = control(t(i),x(i,:),parms);end%Do some plotsfigure(1)  %animationtwolink_animation(t,[x(:,1), x(:,3)],parms);figure(2)subplot(2,1,1);plot(t,parms.control.theta1_ref,'k--'); hold on;plot(t,x(:,1),'b');ylabel('theta1');subplot(2,1,2);plot(t,parms.control.theta2_ref,'k--'); hold on;plot(t,x(:,3),'r');ylabel('theta2');xlabel('time');figure(3)subplot(2,1,1);plot(t,parms.control.theta1dot_ref,'k--'); hold on;plot(t,x(:,2),'b');ylabel('theta1dot');subplot(2,1,2);plot(t,parms.control.theta2dot_ref,'k--'); hold on;plot(t,x(:,4),'r');ylabel('theta2dot');xlabel('time');legend('link1','link2');% figure(3)% plot(t,T1,'k',t,T2,'r');% xlabel('time');% ylabel('Torque');% legend('T1','T2');