clcclose allclear all%Proportional-Derivative Control of one link pendulum% <<onelink.png>>%mass, inertia and gravity.parms.m1  =  1;   parms.I1  =  0.5; parms.g   =  10;parms.l1  = 1;parms.m1_hat = parms.m1;parms.I1_hat = parms.I1;%animation controlparms.time_delay = 0.02;parms.framespersec = 30;%controlsparms.control.Kp1 = 0;parms.control.Kd1 = 2*sqrt(parms.control.Kp1);%0.1*parms.control.Kp1;%Various Disturbances to the systemparms.disturb.T1_mean = 0;parms.disturb.T1_dev = 0;parms.disturb.theta1_mean = 0;parms.disturb.theta1_dev = 0;parms.disturb.theta1dot_mean = 0;parms.disturb.theta1dot_dev = 0;%step size for integration. Accuracy increases as h decreasesh = 0.005;%set the timet1_0 = 0;t1_N = 1.5;t2_0 = 1.5;t2_N = 3;%post-process timeN1 = (t1_N-t1_0)/h;time1 = linspace(t1_0,t1_N,N1);N2 = (t2_N-t2_0)/h;time2 = linspace(t2_0,t2_N,N2);t = [time1(1:end) time2(2:end)];parms.t = t;N = length(parms.t);%This stuff is copied after runnning onelink_traj.a10 = 0;a11 = 0;a12 = (2*pi)/3;a13 = -(8*pi)/27;a20 = -2*pi;a21 = 4*pi;a22 = -2*pi;a23 = (8*pi)/27;thetaA =a10 + a11*time1 + a12*time1.^2 + a13*time1.^3;thetaAdot =a11 + 2*a12*time1 + 3*a13*time1.^2;thetaAddot =2*a12 + 6*a13*time1;thetaB =a20 + a21*time2 + a22*time2.^2 + a23*time2.^3;thetaBdot =a21 + 2*a22*time2 + 3*a23*time2.^2;thetaBddot =2*a22 + 6*a23*time2;theta_ref = [thetaA(1:end) thetaB(2:end)];thetadot_ref = [thetaAdot(1:end) thetaBdot(2:end)];thetaddot_ref = [thetaAddot(1:end) thetaBddot(2:end)];parms.control.theta_ref = theta_ref;parms.control.thetadot_ref = thetadot_ref;parms.control.thetaddot_ref = thetaddot_ref;%Create disturbancesrandn('seed',0); %initializes random number generator so that you get same results every time you run the code.parms.disturb.T1 = parms.disturb.T1_mean + parms.disturb.T1_dev*randn(N,1);parms.disturb.theta1 = parms.disturb.theta1_mean + parms.disturb.theta1_dev*randn(N,1);parms.disturb.theta1dot = parms.disturb.theta1dot_mean + parms.disturb.theta1dot_dev*randn(N,1);% initial conditionstheta1    =   theta_ref(1); %reference pose theta1dot    = thetadot_ref(1); %reference velocityx0=[theta1 theta1dot]';%integrate equations of motionx = ode4('onelink_rhs',t,x0,parms);%Root mean square errorerr_pos = sqrt( mean(x(:,1)'-theta_ref).^2 );err_vel = sqrt( mean(x(:,2)'-thetadot_ref).^2);disp(['RMSE position = ',num2str(err_pos)]);disp(['RMSE velocity = ',num2str(err_vel)]);%get the motor torquefor i=1:length(x)    T1(i,1) = control(t(i),x(i,:),parms);end%do some plots and animationfigure(1)onelink_animation(t,x(:,1),parms);figure(2)plot(t,parms.control.theta_ref,'k--'); hold on;plot(t,x(:,1),'b'); xlabel('time');ylabel('position');legend('reference','actual');figure(3)plot(t,parms.control.thetadot_ref,'k--'); hold on;plot(t,x(:,2),'r');xlabel('time');ylabel('velocity');legend('reference','actual');% figure(3)% plot(t,T1,'k');% xlabel('time');% ylabel('Torque');